// Generics
$forms-color-default: #000 !default;
$forms-color-error: #e80505 !default;
$forms-color-focus: #0396ff !default;
$forms-color-border: lighten($forms-color-default, 75) !default;
$forms-color-background: #fff !default;
$forms-border-radius: 2px;

// Specifics
$forms-label-margin: 0 0 0.25em !default;
$forms-label-color: $forms-color-default !default;
$forms-hint-color: rgba($forms-color-default, 0.5) !default;
$forms-text-padding: 0.5em !default;
$forms-text-color: $forms-color-default !default;

// Technical
$forms-use-visual-validation: true !default;

/*
---
name: Superforms
tag:
  - forms
category:
  - "@gridonic/superforms"
sourcePath: "@gridonic/superforms/src/forms.scss"
---

<p align="center">[![Gridonic Superforms](https://camo.githubusercontent.com/128318e9837651f22ca5a7512bf5d449bd11612d/68747470733a2f2f677269646f6e69632e6769746875622e696f2f6173736574732f696d616765732f6c6f676f732f7375706572666f726d732e737667)](https://github.com/gridonic/superforms)</p>

A *superset* of common form elements created in accordance with the latest best
practices, highly focused on accessibility and easy to use for developers.

### Technical customization

`$forms-use-visual-validation` (default: `true`)

By default form elements that *do not* validate their requirements (mandatory
fields, patterns, etc.) are visually highlighted. This is achieved by
pseudo-classes like `:invalid` or `:required`. Those states are matched
*immediately* after the page has been loaded and this might not always be the
desired behaviour.

Disable it if you wish to manually handle visual feedback. See
[data validation](./text/validation) for further details.

### Visual customization

You may use the variables below to adjust the general appearance of all form
components.

```yaml
$forms-color-default: #{$forms-color-default}
$forms-color-error: #{$forms-color-error}
$forms-color-focus: #{$forms-color-focus}
$forms-color-border: #{$forms-color-border}
$forms-color-background: #{$forms-color-background}
$forms-border-radius: #{$forms-border-radius}
$forms-label-margin: #{$forms-label-margin}
$forms-label-color: #{$forms-label-color};
$forms-hint-color: #{$forms-hint-color};
$forms-text-padding: #{$forms-text-padding}
$forms-text-color: #{$forms-text-color}
```

### üëç Best Practices

- Forms should never consist of more than one column.
- Try to minimize the number of fields as much as possible.
- Users should be able to trigger and edit every field using only the keyboard.
- Autofocusing a field gives the users an indication and a starting point to quickly begin to fill out the form.
- Mobile-only: Match the keyboard with the required text inputs.
- Avoid generic words such as ‚ÄúSubmit‚Äù for actions, because they give the impression that the form itself is generic. Instead state what actions the buttons do when clicked.
- Don‚Äôt use a ‚Äúreset‚Äù button as this button almost never helps users, but often hurts them.


### See also

- [How to structure an HTML form](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/How_to_structure_an_HTML_form)
- [A List Apart: Sensible Forms: A Form Usability Checklist](http://www.alistapart.com/articles/sensibleforms/)
- [Design Better Forms](https://uxdesign.cc/design-better-forms-96fadca0f49c)
- [Designing More Efficient Forms: Structure, Inputs, Labels and Actions](http://babich.biz/designing-more-efficient-forms-structure-inputs-labels-and-actions/)
- [Three rules for creating accessible forms](https://www.nomensa.com/blog/2010/three-rules-for-creating-accessible-forms)

*/
